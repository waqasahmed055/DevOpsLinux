---
- name: Remove password lines from bash history for all users
  hosts: all
  become: yes
  become_user: root
  gather_facts: no

  vars:
    # Keywords to search for and remove (case insensitive)
    password_keywords:
      - "password"
      - "passwd"
      - "pwd"
      - "pass="
      - "--password"
      - "-p "
      - "secret"
      - "token"
      - "key="

  tasks:
    - name: Get users with bash shell and existing home directories
      shell: |
        getent passwd | while IFS=: read -r user x uid gid gecos home shell; do
          if [[ "$shell" == *"bash"* ]] && [[ -d "$home" ]]; then
            echo "$user:$home"
          fi
        done
      register: bash_users_result
      changed_when: false

    - name: Display found bash users
      debug:
        msg: "Found bash users: {{ bash_users_result.stdout_lines }}"
      when: bash_users_result.stdout_lines | length > 0

    - name: Check history file existence and permissions
      stat:
        path: "{{ item.split(':')[1] }}/.bash_history"
      loop: "{{ bash_users_result.stdout_lines }}"
      register: history_stat
      when: bash_users_result.stdout_lines | length > 0
      failed_when: false  # Don't fail if stat fails due to permissions

    - name: Display history file stats
      debug:
        msg: "User: {{ item.item.split(':')[0] }}, History file: {{ item.stat.path | default('N/A') }}, Exists: {{ item.stat.exists | default('false') }}, Readable: {{ item.stat.readable | default('false') }}, Writable: {{ item.stat.writable | default('false') }}"
      loop: "{{ history_stat.results }}"
      when: history_stat.results is defined

    - name: Remove password-containing lines from bash history files
      shell: |
        home_dir="{{ item.split(':')[1] }}"
        user_name="{{ item.split(':')[0] }}"
        echo "Processing user: $user_name, home: $home_dir"
        
        # Process each bash history file
        find "$home_dir" -maxdepth 1 -name ".bash_history*" -type f 2>/dev/null | while read history_file; do
          if [[ -r "$history_file" && -w "$history_file" ]]; then
            echo "Processing file: $history_file"
            
            # Create temp file for cleaned history
            temp_file=$(mktemp)
            
            # Count original lines
            original_lines=$(wc -l < "$history_file" 2>/dev/null || echo "0")
            
            # Remove lines containing password keywords (case insensitive)
            grep -v -i -E "(password|passwd|pwd|pass=|--password|-p |secret|token|key=)" "$history_file" > "$temp_file" 2>/dev/null || touch "$temp_file"
            
            # Count cleaned lines
            cleaned_lines=$(wc -l < "$temp_file" 2>/dev/null || echo "0")
            removed_lines=$((original_lines - cleaned_lines))
            
            # Replace original file with cleaned version
            if [[ -s "$temp_file" ]]; then
              cat "$temp_file" > "$history_file"
              echo "✓ $history_file: Removed $removed_lines lines (${original_lines} -> ${cleaned_lines})"
            else
              # If temp file is empty, clear the original
              > "$history_file"
              echo "✓ $history_file: Cleared completely (all ${original_lines} lines contained passwords)"
            fi
            
            # Clean up temp file
            rm -f "$temp_file"
            
            # Preserve original ownership and set permissions
            chown --reference="$home_dir" "$history_file" 2>/dev/null || true
            chmod 600 "$history_file" 2>/dev/null || true
          else
            echo "⚠ Cannot process $history_file (not readable/writable)"
          fi
        done
        
        echo "Completed processing for user: $user_name"
      loop: "{{ bash_users_result.stdout_lines }}"
      when: bash_users_result.stdout_lines | length > 0
      register: clean_result

    - name: Process root user's bash history files explicitly
      shell: |
        echo "Processing root user"
        home_dir="/root"
        user_name="root"
        
        find "$home_dir" -maxdepth 1 -name ".bash_history*" -type f 2>/dev/null | while read history_file; do
          if [[ -r "$history_file" && -w "$history_file" ]]; then
            echo "Processing file: $history_file"
            
            temp_file=$(mktemp)
            original_lines=$(wc -l < "$history_file" 2>/dev/null || echo "0")
            
            grep -v -i -E "(password|passwd|pwd|pass=|--password|-p |secret|token|key=)" "$history_file" > "$temp_file" 2>/dev/null || touch "$temp_file"
            
            cleaned_lines=$(wc -l < "$temp_file" 2>/dev/null || echo "0")
            removed_lines=$((original_lines - cleaned_lines))
            
            if [[ -s "$temp_file" ]]; then
              cat "$temp_file" > "$history_file"
              echo "✓ $history_file: Removed $removed_lines lines (${original_lines} -> ${cleaned_lines})"
            else
              > "$history_file"
              echo "✓ $history_file: Cleared completely (all ${original_lines} lines contained passwords)"
            fi
            
            rm -f "$temp_file"
            chmod 600 "$history_file"
          else
            echo "⚠ Cannot process $history_file (not readable/writable)"
          fi
        done
        echo "Completed processing for root user"
      when: true

    - name: Generate summary report
      shell: |
        echo "=== BASH HISTORY CLEANUP SUMMARY ==="
        echo "Date: $(date)"
        echo "Host: $(hostname)"
        echo ""
        
        total_users=$(echo "{{ bash_users_result.stdout_lines | length }}" | grep -v '^0$')
        total_files=0
        
        # Count files processed in regular users
        for line in {{ bash_users_result.stdout_lines | map('quote') | join(' ') }}; do
          home_dir=$(echo "$line" | cut -d: -f2)
          files=$(find "$home_dir" -maxdepth 1 -name ".bash_history*" -type f 2>/dev/null | wc -l)
          total_files=$((total_files + files))
        done
        
        # Add root files
        root_files=$(find /root -maxdepth 1 -name ".bash_history*" -type f 2>/dev/null | wc -l)
        total_files=$((total_files + root_files))
        
        echo "RESULTS:"
        echo "- Users processed: $total_users"
        echo "- History files processed: $total_files"
        echo "- Keywords removed: {{ password_keywords | join(', ') }}"
        echo ""
        echo "=== END SUMMARY ==="
      register: summary_result

    - name: Display cleanup summary
      debug:
        msg: "{{ summary_result.stdout_lines }}"

    - name: Final completion message
      debug:
        msg: "Password removal from bash history completed successfully for all users."
