---
- name: Remove password lines from bash history for all users
  hosts: all
  become: yes
  become_user: root
  gather_facts: no

  vars:
    # Keywords to search for and remove (case insensitive)
    password_keywords:
      - "password"
      - "passwd"
      - "pwd"
      - "pass="
      - "--password"
      - "-p "
      - "secret"
      - "token"
      - "key="

  tasks:
    - name: Get users with bash shell and existing home directories
      shell: |
        getent passwd | while IFS=: read -r user x uid gid gecos home shell; do
          if [[ "$shell" == *"bash"* ]] && [[ -d "$home" ]]; then
            echo "$user:$home"
          fi
        done
      register: bash_users_result
      changed_when: false

    - name: Display found bash users
      debug:
        msg: "Found bash users: {{ bash_users_result.stdout_lines }}"
      when: bash_users_result.stdout_lines | length > 0

    - name: Remove password-containing lines from bash history files
      shell: |
        home_dir="{{ item.split(':')[1] }}"
        user_name="{{ item.split(':')[0] }}"
        echo "Processing user: $user_name, home: $home_dir"
        
        removed_count=0
        
        # Process each bash history file
        find "$home_dir" -maxdepth 1 -name ".bash_history*" -type f | while read history_file; do
          if [[ -r "$history_file" && -w "$history_file" ]]; then
            echo "Processing file: $history_file"
            
            # Create temp file for cleaned history
            temp_file=$(mktemp)
            
            # Count original lines
            original_lines=$(wc -l < "$history_file" 2>/dev/null || echo "0")
            
            # Remove lines containing password keywords (case insensitive)
            grep -v -i -E "(password|passwd|pwd|pass=|--password|-p |secret|token|key=)" "$history_file" > "$temp_file" 2>/dev/null || touch "$temp_file"
            
            # Count cleaned lines
            cleaned_lines=$(wc -l < "$temp_file" 2>/dev/null || echo "0")
            removed_lines=$((original_lines - cleaned_lines))
            
            # Replace original file with cleaned version
            if [[ -s "$temp_file" ]]; then
              cat "$temp_file" > "$history_file"
              echo "✓ $history_file: Removed $removed_lines lines (${original_lines} -> ${cleaned_lines})"
            else
              # If temp file is empty, clear the original
              > "$history_file"
              echo "✓ $history_file: Cleared completely (all ${original_lines} lines contained passwords)"
            fi
            
            # Clean up temp file
            rm -f "$temp_file"
            
            # Preserve original ownership and permissions
            chown --reference="$home_dir" "$history_file" 2>/dev/null || true
            chmod 600 "$history_file" 2>/dev/null || true
          else
            echo "⚠ Cannot process $history_file (not readable/writable)"
          fi
        done
        
        echo "Completed processing for user: $user_name"
      loop: "{{ bash_users_result.stdout_lines }}"
      when: bash_users_result.stdout_lines | length > 0
      register: clean_result

    - name: Process additional locations for bash history files
      shell: |
        echo "=== Processing additional locations ==="
        
        # Process root directory separately
        find /root -maxdepth 1 -name ".bash_history*" -type f 2>/dev/null | while read history_file; do
          if [[ -r "$history_file" && -w "$history_file" ]]; then
            echo "Processing: $history_file"
            
            temp_file=$(mktemp)
            original_lines=$(wc -l < "$history_file" 2>/dev/null || echo "0")
            
            grep -v -i -E "(password|passwd|pwd|pass=|--password|-p |secret|token|key=)" "$history_file" > "$temp_file" 2>/dev/null || touch "$temp_file"
            
            cleaned_lines=$(wc -l < "$temp_file" 2>/dev/null || echo "0")
            removed_lines=$((original_lines - cleaned_lines))
            
            if [[ -s "$temp_file" ]]; then
              cat "$temp_file" > "$history_file"
              echo "✓ $history_file: Removed $removed_lines lines (${original_lines} -> ${cleaned_lines})"
            else
              > "$history_file"
              echo "✓ $history_file: Cleared completely (all ${original_lines} lines contained passwords)"
            fi
            
            rm -f "$temp_file"
            chmod 600 "$history_file"
          fi
        done
        
        # Process any other locations where bash history might exist
        for potential_home in /var/lib/*/home /opt/*/home /usr/local/*/home; do
          if [[ -d "$potential_home" ]]; then
            find "$potential_home" -name ".bash_history*" -type f 2>/dev/null | while read history_file; do
              echo "Found additional history file: $history_file"
              # Apply same cleaning logic
              temp_file=$(mktemp)
              original_lines=$(wc -l < "$history_file" 2>/dev/null || echo "0")
              
              grep -v -i -E "(password|passwd|pwd|pass=|--password|-p |secret|token|key=)" "$history_file" > "$temp_file" 2>/dev/null || touch "$temp_file"
              
              cleaned_lines=$(wc -l < "$temp_file" 2>/dev/null || echo "0")
              removed_lines=$((original_lines - cleaned_lines))
              
              if [[ -s "$temp_file" ]]; then
                cat "$temp_file" > "$history_file"
                echo "✓ $history_file: Removed $removed_lines lines"
              else
                > "$history_file"
                echo "✓ $history_file: Cleared completely"
              fi
              
              rm -f "$temp_file"
            done
          fi
        done

    - name: Clear in-memory bash history for running sessions
      shell: |
        echo "=== Clearing in-memory bash history ==="
        
        # For each running bash process, try to clear its history
        for pid in $(pgrep bash 2>/dev/null || true); do
          if [[ -n "$pid" ]]; then
            # Try to clear history in running bash sessions
            echo "history -c" > /proc/$pid/fd/0 2>/dev/null || true
            echo "Attempted to clear history for bash PID: $pid"
          fi
        done
        
        # Send SIGUSR1 to bash processes (some shells respond to this)
        pkill -USR1 bash 2>/dev/null || true
        
        echo "In-memory history clearing attempted"

    - name: Generate summary report
      shell: |
        echo "=== BASH HISTORY CLEANUP SUMMARY ==="
        echo "Date: $(date)"
        echo "Host: $(hostname)"
        echo ""
        
        total_files=0
        total_users=0
        
        # Count processed files and users
        getent passwd | while IFS=: read -r user x uid gid gecos home shell; do
          if [[ "$shell" == *"bash"* ]] && [[ -d "$home" ]]; then
            total_users=$((total_users + 1))
            history_files=$(find "$home" -maxdepth 1 -name ".bash_history*" -type f 2>/dev/null | wc -l)
            total_files=$((total_files + history_files))
            if [[ $history_files -gt 0 ]]; then
              echo "User: $user ($home) - $history_files history file(s) processed"
            fi
          fi
        done
        
        # Check root separately
        root_files=$(find /root -maxdepth 1 -name ".bash_history*" -type f 2>/dev/null | wc -l)
        if [[ $root_files -gt 0 ]]; then
          echo "User: root (/root) - $root_files history file(s) processed"
          total_files=$((total_files + root_files))
        fi
        
        echo ""
        echo "RESULTS:"
        echo "- Users processed: $total_users"
        echo "- History files processed: $total_files"
        echo "- Keywords removed: password, passwd, pwd, pass=, --password, -p, secret, token, key="
        echo "- Running bash processes: $(pgrep bash 2>/dev/null | wc -l || echo 0)"
        echo ""
        echo "=== END SUMMARY ==="
      register: summary_result

    - name: Display cleanup summary
      debug:
        msg: "{{ summary_result.stdout_lines }}"

    - name: Final completion message
      debug:
        msg: "Password removal from bash history completed successfully. All lines containing password-related keywords have been removed from bash history files."
